-- Criar a tabela principal de compras
CREATE TABLE compras (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    loja_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    fornecedor VARCHAR NOT NULL,
    data_compra TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL,
    valor_total DECIMAL(10,2) NOT NULL,
    tipo_compra VARCHAR NOT NULL DEFAULT 'fruta', -- 'fruta' ou 'outros'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL
);

-- Criar a tabela de itens de compra
CREATE TABLE itens_compra (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    compra_id BIGINT REFERENCES compras(id) ON DELETE CASCADE NOT NULL,
    loja_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    produto VARCHAR NOT NULL,
    quantidade DECIMAL(10,2) NOT NULL,
    valor_unitario DECIMAL(10,2) NOT NULL,
    valor_total DECIMAL(10,2) NOT NULL,
    fornecedor VARCHAR NOT NULL,
    data_compra TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL,
    tipo_compra VARCHAR NOT NULL DEFAULT 'fruta', -- 'fruta' ou 'outros'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('UTC'::TEXT, NOW()) NOT NULL
);

-- Criar índices para melhor performance
CREATE INDEX idx_compras_data ON compras(data_compra);
CREATE INDEX idx_compras_tipo ON compras(tipo_compra);
CREATE INDEX idx_compras_loja ON compras(loja_id);
CREATE INDEX idx_itens_compra_id ON itens_compra(compra_id);
CREATE INDEX idx_itens_compra_data ON itens_compra(data_compra);
CREATE INDEX idx_itens_compra_tipo ON itens_compra(tipo_compra);
CREATE INDEX idx_itens_compra_loja ON itens_compra(loja_id);

-- Função para atualizar o updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('UTC'::TEXT, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers para atualizar o updated_at
CREATE TRIGGER update_compras_updated_at
    BEFORE UPDATE ON compras
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_itens_compra_updated_at
    BEFORE UPDATE ON itens_compra
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Políticas de segurança RLS (Row Level Security)
ALTER TABLE compras ENABLE ROW LEVEL SECURITY;
ALTER TABLE itens_compra ENABLE ROW LEVEL SECURITY;

-- Políticas para compras
CREATE POLICY "Permitir leitura para usuários da mesma loja"
    ON compras FOR SELECT
    TO authenticated
    USING (loja_id = auth.uid());

CREATE POLICY "Permitir inserção para usuários da mesma loja"
    ON compras FOR INSERT
    TO authenticated
    WITH CHECK (loja_id = auth.uid());

CREATE POLICY "Permitir atualização para usuários da mesma loja"
    ON compras FOR UPDATE
    TO authenticated
    USING (loja_id = auth.uid())
    WITH CHECK (loja_id = auth.uid());

CREATE POLICY "Permitir deleção para usuários da mesma loja"
    ON compras FOR DELETE
    TO authenticated
    USING (loja_id = auth.uid());

-- Políticas para itens_compra
CREATE POLICY "Permitir leitura para usuários da mesma loja"
    ON itens_compra FOR SELECT
    TO authenticated
    USING (loja_id = auth.uid());

CREATE POLICY "Permitir inserção para usuários da mesma loja"
    ON itens_compra FOR INSERT
    TO authenticated
    WITH CHECK (loja_id = auth.uid());

CREATE POLICY "Permitir atualização para usuários da mesma loja"
    ON itens_compra FOR UPDATE
    TO authenticated
    USING (loja_id = auth.uid())
    WITH CHECK (loja_id = auth.uid());

CREATE POLICY "Permitir deleção para usuários da mesma loja"
    ON itens_compra FOR DELETE
    TO authenticated
    USING (loja_id = auth.uid()); 